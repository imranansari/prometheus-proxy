plugins {
    id 'idea'
    id 'maven'
    id 'java'
    id 'jacoco'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.72'
    //id 'com.google.protobuf' version '0.8.12' apply false
    id 'com.google.protobuf' version '0.8.12'
    id "com.github.ben-manes.versions" version '0.29.0'
    id 'com.github.johnrengelman.shadow' version '6.0.0'
    id 'com.github.kt3k.coveralls' version '2.10.1'
}

ext {
    libraries = [
    ]
}

allprojects {
    group = 'io.prometheus'
    version = '1.7.1'

    apply plugin: 'idea'
    apply plugin: 'maven' // required for jitpack.io install
    apply plugin: 'jacoco'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    //apply plugin: 'org.jetbrains.kotlin.plugin.serialization'
    //apply plugin: "com.google.protobuf"
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'com.github.kt3k.coveralls'

    repositories {
        maven { url = "https://kotlin.bintray.com/kotlinx" }
        maven { url = 'https://maven-central.storage-download.googleapis.com/repos/central/data/' }
        jcenter()
        maven { url = 'https://jitpack.io' }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

subprojects {

    dependencies {

        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
        implementation "org.jetbrains.kotlin:kotlin-reflect"

        implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$coroutines_version"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j:$coroutines_version"

        //implementation "io.grpc:grpc-all:$grpc_version"
        implementation "io.grpc:grpc-netty-shaded:${grpc_version}"
        implementation "io.grpc:grpc-protobuf:${grpc_version}"
        implementation "io.grpc:grpc-stub:${grpc_version}"
        implementation "io.grpc:grpc-services:${grpc_version}"

        implementation "io.grpc:grpc-kotlin-stub:${gengrpc_version}"

        implementation "io.ktor:ktor-client-core:$ktor_version"
        implementation "io.ktor:ktor-client-cio:$ktor_version"

        implementation "io.ktor:ktor-server-core:$ktor_version"
        implementation "io.ktor:ktor-server-cio:$ktor_version"

        implementation "com.github.pambrose.common-utils:core-utils:$utils_version"
        implementation "com.github.pambrose.common-utils:corex-utils:$utils_version"
        implementation "com.github.pambrose.common-utils:dropwizard-utils:$utils_version"
        implementation "com.github.pambrose.common-utils:guava-utils:$utils_version"
        implementation "com.github.pambrose.common-utils:grpc-utils:$utils_version"
        implementation "com.github.pambrose.common-utils:jetty-utils:$utils_version"
        implementation "com.github.pambrose.common-utils:ktor-client-utils:$utils_version"
        implementation "com.github.pambrose.common-utils:prometheus-utils:$utils_version"
        implementation "com.github.pambrose.common-utils:service-utils:$utils_version"
        implementation "com.github.pambrose.common-utils:zipkin-utils:$utils_version"

        implementation "org.eclipse.jetty:jetty-servlet:$jetty_version"

        implementation "javax.annotation:javax.annotation-api:$annotation_version"
        implementation "com.beust:jcommander:$jcommander_version"
        implementation "com.typesafe:config:$typesafe_version"

        implementation "io.prometheus:simpleclient:$prometheus_version"

        implementation "io.dropwizard.metrics:metrics-healthchecks:$dropwizard_version"

        implementation "io.zipkin.brave:brave-instrumentation-grpc:$zipkin_version"

        implementation "io.github.microutils:kotlin-logging:$logging_version"
        implementation "ch.qos.logback:logback-classic:$logback_version"
        implementation "org.slf4j:jul-to-slf4j:$slf4j_version"

        testImplementation "org.amshove.kluent:kluent:$kluent_version"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    }

    compileKotlin.dependsOn ':generateProto'

    protobuf {
        protoc { artifact = "com.google.protobuf:protoc:$protoc_version" }
        plugins {
            grpc { artifact = "io.grpc:protoc-gen-grpc-java:$grpc_version" }

            // Specify protoc to generate using our grpc kotlin plugin
            grpckt { artifact = "io.grpc:protoc-gen-grpc-kotlin:${gengrpc_version}" }
        }
        generateProtoTasks {
            all().each { task ->
                task.plugins {
                    // Generate Java gRPC classes
                    grpc {}
                    // Generate Kotlin gRPC using the custom plugin from library
                    grpckt {}
                }
            }
        }
    }


    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        //archives javadocJar
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
            freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                                 '-Xuse-experimental=kotlinx.serialization.UnstableDefault',
                                 '-Xuse-experimental=kotlin.ExperimentalUnsignedTypes',
                                 '-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi',
                                 '-Xuse-experimental=kotlinx.coroutines.InternalCoroutinesApi',
                                 '-Xuse-experimental=io.ktor.util.KtorExperimentalAPI',
                                 '-Xuse-experimental=kotlinx.serialization.UnstableDefault']
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
            freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                                 '-Xuse-experimental=kotlinx.serialization.UnstableDefault',
                                 '-Xuse-experimental=kotlin.ExperimentalUnsignedTypes',
                                 '-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi',
                                 '-Xuse-experimental=kotlinx.coroutines.InternalCoroutinesApi',
                                 '-Xuse-experimental=io.ktor.util.KtorExperimentalAPI',
                                 '-Xuse-experimental=kotlinx.serialization.UnstableDefault']
        }
    }

    test {
        useJUnitPlatform()

        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
            showStandardStreams = true
        }
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    //startScripts.enabled = false

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

/*
sourceSets {
  main.java.srcDirs += ['src/main/java']
  main.kotlin.srcDirs += ['src/main/kotlin']
  test.java.srcDirs += ['src/test/java']
  test.kotlin.srcDirs += ['src/test/kotlin']
  main.resources.srcDirs += ['src/main/resources']
  test.resources.srcDirs += ['src/main/testresources']
}
*/

